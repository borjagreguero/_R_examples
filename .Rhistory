points(9.45,50.55,type = 2)
points(9.45,50.55,type = 1)
points(9.45,50.55,size(3))
?points
points(9.45,50.55,type=0)
points(9.45,50.55,pch=0)
?points
points(9.45,50.55,pch=0,cex = .6)
points(9.45,50.55,pch=0,cex = 3)
points(9.45,50.55,pch=0,cex = 2)
par(mfrow = c(1,1))
plot(q,P,type = "line")
lines(q,IMg,lty=1,lwd=2,col="green")
lines(q,CMg1,lty=1,lwd=2,col="red")
lines(q,CMg2,lty=1,lwd=2,col="blue")
legend(x = 35,y = 55,cex = 0.9,legend = c("P","IMg","CMg1","CMg2"),
horiz = F, lty = c(1,1,1,1),col = c("black","green","red","blue"),box.lty=0)
#legend("topright",legend = c("P","IMg","CMg"),lty = c(1,1,1),
#       text.font = 1, col = c("black","red","blue"),box.lty=0)
grid(NULL, NULL, lwd = 1) # grid only in y-direction
points(9.45,50.55,pch=0,cex = 2)
points(9.45,50.55,pch=0,cex = 0.7)
text(9.45+5,50.55+2,'Eq Cartel')
par(mfrow = c(1,1))
plot(q,P,type = "line")
lines(q,IMg,lty=1,lwd=2,col="green")
lines(q,CMg1,lty=1,lwd=2,col="red")
lines(q,CMg2,lty=1,lwd=2,col="blue")
legend(x = 35,y = 55,cex = 0.9,legend = c("P","IMg","CMg1","CMg2"),
horiz = F, lty = c(1,1,1,1),col = c("black","green","red","blue"),box.lty=0)
#legend("topright",legend = c("P","IMg","CMg"),lty = c(1,1,1),
#       text.font = 1, col = c("black","red","blue"),box.lty=0)
grid(NULL, NULL, lwd = 1) # grid only in y-direction
points(9.45,50.55,pch=0,cex = 2)
points(9.45,50.55,pch=0,cex = 0.7)
text(9.45+2,50.55+2,'Eq Cartel')
points(9.45,50.55,pch=2,cex = 2)
points(9.45,50.55,pch=0,cex = 0.7)
text(9.45+2,50.55+2,'Eq Cartel')
par(mfrow = c(1,1))
plot(q,P,type = "line")
lines(q,IMg,lty=1,lwd=2,col="green")
lines(q,CMg1,lty=1,lwd=2,col="red")
lines(q,CMg2,lty=1,lwd=2,col="blue")
legend(x = 35,y = 55,cex = 0.9,legend = c("P","IMg","CMg1","CMg2"),
horiz = F, lty = c(1,1,1,1),col = c("black","green","red","blue"),box.lty=0)
#legend("topright",legend = c("P","IMg","CMg"),lty = c(1,1,1),
#       text.font = 1, col = c("black","red","blue"),box.lty=0)
grid(NULL, NULL, lwd = 1) # grid only in y-direction
points(9.45,50.55,pch=2,cex = 2)
points(9.45,50.55,pch=0,cex = 0.7)
text(9.45+2,50.55+2,'Eq Cartel')
par(mfrow = c(1,1))
plot(q,P,type = "line")
lines(q,IMg,lty=1,lwd=2,col="green")
lines(q,CMg1,lty=1,lwd=2,col="red")
lines(q,CMg2,lty=1,lwd=2,col="blue")
legend(x = 35,y = 55,cex = 0.9,legend = c("P","IMg","CMg1","CMg2"),
horiz = F, lty = c(1,1,1,1),col = c("black","green","red","blue"),box.lty=0)
#legend("topright",legend = c("P","IMg","CMg"),lty = c(1,1,1),
#       text.font = 1, col = c("black","red","blue"),box.lty=0)
grid(NULL, NULL, lwd = 1) # grid only in y-direction
points(9.45,50.55,pch=0,cex = 1.5)
points(9.45,50.55,pch=0,cex = 0.7)
text(9.45+2,50.55+2,'Eq Cartel')
Q1 = 4.18
Q2
Q1
Q1
Q2 = 1.5*Q1 - 1
Q = Q1+Q2
Q1 + 2*Q +22
60-2*Q
46/11
Q2 = 1.5*Q1 - 1
Q = Q1+Q2
Q1 + 2*Q +22
60-2*Q
Q
Q1 = 46/11 # 4.18
Q2 = (3*Q1 - 2)/2
Q = Q1+Q2
Q2
Q1
5*Q1 + 4*Q
5*Q1 + 4*Q -38
5*Q1 + 4*Q2 -38
3*Q1 - 3*Q2 +2
60-2*Q
38+8
60-22
Q1 = 42/11 # 4.18
Q2 = (3*Q1 - 2)/2
Q = Q1+Q2
Q2
Q1
Q = Q1+Q2
Q
5*Q1 + 4*Q2 -38
3*Q1 - 3*Q2 +2
2*Q1 - 3*Q2 +2
3*Q1 - 2*Q2 +2
3*Q1 - 2*Q2 -2
60-2*Q
60-*Q
60-Q
P=60-Q
text(Q+2,P+2,'Eq Cartel')
points(Q,P,pch=0,cex = 1.5)
points(Q,P,pch=0,cex = 0.7)
par(mfrow = c(1,1))
plot(q,P,type = "line")
lines(q,IMg,lty=1,lwd=2,col="green")
lines(q,CMg1,lty=1,lwd=2,col="red")
lines(q,CMg2,lty=1,lwd=2,col="blue")
legend(x = 35,y = 55,cex = 0.9,legend = c("P","IMg","CMg1","CMg2"),
horiz = F, lty = c(1,1,1,1),col = c("black","green","red","blue"),box.lty=0)
#legend("topright",legend = c("P","IMg","CMg"),lty = c(1,1,1),
#       text.font = 1, col = c("black","red","blue"),box.lty=0)
grid(NULL, NULL, lwd = 1) # grid only in y-direction
points(Q,P,pch=0,cex = 1.5)
points(Q,P,pch=0,cex = 0.7)
text(Q+2,P+2,'Eq Cartel')
par(mfrow = c(1,1))
plot(q,P,type = "line")
lines(q,IMg,lty=1,lwd=2,col="green")
lines(q,CMg1,lty=1,lwd=2,col="red")
lines(q,CMg2,lty=1,lwd=2,col="blue")
legend(x = 35,y = 55,cex = 0.9,legend = c("P","IMg","CMg1","CMg2"),
horiz = F, lty = c(1,1,1,1),col = c("black","green","red","blue"),box.lty=0)
#legend("topright",legend = c("P","IMg","CMg"),lty = c(1,1,1),
#       text.font = 1, col = c("black","red","blue"),box.lty=0)
grid(NULL, NULL, lwd = 1) # grid only in y-direction
points(Q,P,pch=0,cex = 1.5)
points(Q,P,pch=0,cex = 0.7)
text(Q+2,P+2,'Eq Cartel')
par(mfrow = c(1,1))
q = seq(0,60,0.1)
P = 60-q
IMg = 60-2*q
CMg1 = 3*q + 10
CMg2 = 2*q + 12
Q1 = 42/11 # 4.18
Q2 = (3*Q1 - 2)/2
Q = Q1+Q2
5*Q1 + 4*Q2 -38
3*Q1 - 2*Q2 -2
PE=60-Q
par(mfrow = c(1,1))
plot(q,P,type = "line")
lines(q,IMg,lty=1,lwd=2,col="green")
lines(q,CMg1,lty=1,lwd=2,col="red")
lines(q,CMg2,lty=1,lwd=2,col="blue")
legend(x = 35,y = 55,cex = 0.9,legend = c("P","IMg","CMg1","CMg2"),
horiz = F, lty = c(1,1,1,1),col = c("black","green","red","blue"),box.lty=0)
#legend("topright",legend = c("P","IMg","CMg"),lty = c(1,1,1),
#       text.font = 1, col = c("black","red","blue"),box.lty=0)
grid(NULL, NULL, lwd = 1) # grid only in y-direction
points(Q,PE,pch=0,cex = 1.5)
points(Q,PE,pch=0,cex = 0.7)
text(Q+2,PE+2,'Eq Cartel')
B1 = PE*Q1 - (1.5*Q1^2 + 10*Q1 +20 )
B1 = PE*Q1 - (1.5*Q1^2 + 10*Q1 +20 )
B2 = PE*Q2 - (Q2^2 + 12*Q2 +10 )
B1
B2
dt(0.05,df=49)
dt(0.95,df=49)
pt(0.95,df=49)
qt(0.975,df=49)
qt(0.95,df=49)
qt(0.975,df=49)
0.7152/0.1569
?qt
qt(0.975,df=49)
qt(0.975,df=900)
qt(0.975,df=50)
qt(0.975,df=49)
qt(0.975,df=49)+ 0.7152
qt(0.975,df=49)- 0.7152
-qt(0.975,df=49) +0.7152
-qt(0.975,df=49)*0.1569 +0.7152
qt(0.975,df=49)*0.1569 +0.7152
c=matrix(c(5,0), c(0,7))
c=matrix(c(5,0,0,7),nrow = 2,ncol = 2)
c
solve(c)
?solve
?ginv
library(MASS)
?ginv
library(MASS)
ginv(c)
solve(c)
ginv(c)
7/35
1/6
5/35
d = matrix(c(1,0,2,0),nrow = 2,ncol = 2)
d
c
d = matrix(c(1,2,0,0),nrow = 2,ncol = 2)
d
c*d
cinv=ginv(c)
cinv*d
0.1429(2)
0.1429*2
head(iris_data,10)
N = 300e6
k = 1.96
P = 0.1
Q = 1-P
e = 0.05
num = N * k^2 * P * Q
den = e^2 * (N-1) + k^2 * P * Q
n = num./den
num = N * k^2 * P * Q
den = e^2 * (N-1) + k^2 * P * Q
n = num./den
term1 = N * k^2 * P * Q
term2 = e^2 * (N-1) + k^2 * P * Q
n = term1/term2
n
N
N * k^2 * P * Q
k^2 * P * Q
e^2 * (N-1)
e^2
(N-1)
term1 = N * k^2 * P * Q
term2 = e^2 * (N-1) + k^2 * P * Q
n = term1/term2
n
n
N = 300e6
k = 1.96
P = 0.1
Q = 1-P
e = 0.02
term1 = N * k^2 * P * Q
term2 = e^2 * (N-1) + k^2 * P * Q
n = term1/term2
n
138/5
864-5
864/5
864/5/20
devtools::install_github('jcizel/FredR')
api.key = 'aace5b02f7165b7c56a926589dadbfb9'  # substitute ... with your API key
# Next, you need to initialize FredR:
fred <- FredR(api.key)
library(FredR)
api.key = 'aace5b02f7165b7c56a926589dadbfb9'  # substitute ... with your API key
# Next, you need to initialize FredR:
fred <- FredR(api.key)
fred
str(fred,1)
gdp.series <- fred$series.search("GDP")
head(gdp.series)
head(gdp.series$title)
str(gdp.series$title)
(gdp.series$title)
View(gdp.series)
View(gdp.series)
GDP = gdp.series[2,]
GDP
GDP <- fred$series.observations(series_id = 'GDP')
GDP
qplot(GDP$value)
library(pipeR)
library(dplyr)
library(pipeR)
library(dplyr)
qplot(GDP$value)
library(ggplot2)
qplot(GDP$value)
library(FredR)
GDP$value
plot(GDP$value)
plot(GDP$value,type = 2)
plot(GDP$value,type = 20)
?plot
plot(GDP$value,type = "l")
plot(GDP$value,type = "l",xlab = "time",ylim = "GDP (bill $)")
plot(GDP$value,type = "l",xlab = "time",ylim = "GDP (bill $)")
plot(GDP$value,type = "l",xlab = "time",ylab = "GDP (bill $)")
grid
plot(x = GDP$date, GDP$value,type = "l",xlab = "time",ylab = "GDP (bill $)")
plot(x = GDP$date, Y=GDP$value,type = "l",xlab = "time",ylab = "GDP (bill $)")
plot(x = GDP$date, y=GDP$value,type = "l",xlab = "time",ylab = "GDP (bill $)")
GDP$date
plot(x = as.numeric(GDP$date), y=GDP$value,type = "l",xlab = "time",ylab = "GDP (bill $)")
plot(x = as.Date(GDP$date), y=GDP$value,type = "l",xlab = "time",ylab = "GDP (bill $)")
install.packages("FREDR")
install.packages(c("quant", "mod"))
library(quantmod)
install.packages("quantmod")
library(quantmod)
getSymbols.FRED
setDefaults(getSymbols,src='FRED')
getSymbols('CPIAUCNS')
install.packages("Quandl")
library(Quandl)
mydata = Quandl("FRED/GDP")
mydata = Quandl("FRED/GDP")
mydata
Quandl("FRED/GDP", collapse="annual")
Quandl("FRED/GDP", transform="rdiff")
setwd("~/bgr/MOOC/_R/_R_examples")
library(scales)
library(ggthemes)
library(tidyjson)
library(tidyverse)
library(forcats)
install.packages("tidyjson")
install.packages(c("tidy", "verse"))
install.packages("tidyverse")
install.packages("forcats")
filename = './data/shaw.json'
shaw_json <- paste(readLines(filename), collapse="")
filename
readLines(filename)
shaw_json <- paste(readLines(filename), collapse="")
shaw_json
films <- shaw_json %>% as.tbl_json %>% gather_array %>%
spread_values(
title = jstring("title"),
director = jstring('director'),
year = jstring('year'),
avg_rating = jnumber('avg_rating'),
watches = jnumber("watches"),
likes = jnumber("likes"),
time = jnumber("time")
)
library(scales)
library(ggthemes)
library(tidyjson)
library(tidyverse)
library(forcats)
films <- shaw_json %>% as.tbl_json %>% gather_array %>%
spread_values(
title = jstring("title"),
director = jstring('director'),
year = jstring('year'),
avg_rating = jnumber('avg_rating'),
watches = jnumber("watches"),
likes = jnumber("likes"),
time = jnumber("time")
)
films
films %>% head(n = 5) %>% select(title, director, year)
library("rdatamarket")
dminit(NULL)
# Pull in life expectancy and population data
life_expectancy <- dmlist("15r2!hrp")
population <- dmlist("1cfl!r3d")
life_expectancy <- dmlist("15r2!hrp")
library("rdatamarket")
dminit(NULL)
# Pull in life expectancy and population data
life_expectancy <- dmlist("15r2!hrp")
gdp = dmlist("15c9!hd1")
library("rdatamarket")
dminit(NULL)
# Pull in life expectancy and population data
life_expectancy <- dmlist("15r2!hrp")
population <- dmlist("1cfl!r3d")
# Inspect life_expectancy and population with head() or tail()
head(life_expectancy)
tail(life_expectancy)
head(population)
tail(popopulation)
gdp = dmlist("15c9!hd1")
# Inspect gdp with tail()
tail(gdp)
install.packages("highcharter")
library(highcharter)
library(dplyr)
rainfall <- data.frame(date = as.Date(rep(c("2000-01-01", "2000-01-02", "2000-01-03", "2000-01-04"), 2), "%Y-%m-%d"),
value = c(13.2, 9.5, 7.3, 0.2, 150, 135, 58, 38),
variable = c(rep("rain", 4), rep("discharge", 4)))
rainfall
hc <- highchart() %>%
hc_yAxis_multiples(list(title = list(text = "rainfall depth (mm)"), reversed = TRUE),
list(title = list(text = "flow (m3/s)"),
opposite = TRUE)) %>%
hc_add_series(data = filter(rainfall, variable == "rain") %>% mutate(value = -value) %>% .$value, type = "column") %>%
hc_add_series(data = filter(rainfall, variable == "discharge") %>% .$value, type = "spline", yAxis = 1) %>%
hc_xAxis(categories = dataset$rain.date, title = list(text = "date"))
hc
hc <- highchart() %>%
hc_yAxis_multiples(list(title = list(text = "rainfall depth (mm)"), reversed = TRUE),
list(title = list(text = "flow (m3/s)"),
opposite = TRUE)) %>%
hc_add_series(data = filter(rainfall, variable == "rain") %>% mutate(value = -value) %>% .$value, type = "column") %>%
hc_add_series(data = filter(rainfall, variable == "discharge") %>% .$value, type = "spline", yAxis = 1) %>%
hc_xAxis(categories = dataset$rain.date, title = list(text = "date"))
hc
library(dplyr)
hc <- highchart() %>%
hc_yAxis_multiples(list(title = list(text = "rainfall depth (mm)"), reversed = TRUE),
list(title = list(text = "flow (m3/s)"),
opposite = TRUE)) %>%
hc_add_series(data = filter(rainfall, variable == "rain") %>% mutate(value = -value) %>% .$value, type = "column") %>%
hc_add_series(data = filter(rainfall, variable == "discharge") %>% .$value, type = "spline", yAxis = 1) %>%
hc_xAxis(categories = dataset$rain.date, title = list(text = "date"))
hc
hc <- highchart() %>%
hc_yAxis_multiples(list(title = list(text = "rainfall depth (mm)"), reversed = TRUE),
list(title = list(text = "flow (m3/s)"),
opposite = TRUE)) %>%
hc_add_series(data = filter(rainfall, variable == "rain") %>% mutate(value = -value) %>% .$value, type = "column") %>%
hc_add_series(data = filter(rainfall, variable == "discharge") %>% .$value, type = "spline", yAxis = 1) %>%
hc_xAxis(categories = rainfall$date, title = list(text = "date"))
hc
hc <- highchart() %>%
hc_yAxis_multiples(list(title = list(text = "rainfall depth (mm)"), reversed = FALSE),
list(title = list(text = "flow (m3/s)"),
opposite = TRUE)) %>%
hc_add_series(data = filter(rainfall, variable == "rain") %>% mutate(value = -value) %>% .$value, type = "column") %>%
hc_add_series(data = filter(rainfall, variable == "discharge") %>% .$value, type = "spline", yAxis = 1) %>%
hc_xAxis(categories = rainfall$date, title = list(text = "date"))
hc
hc <- highchart() %>%
hc_yAxis_multiples(list(title = list(text = "rainfall depth (mm)"), reversed = TRUE),
list(title = list(text = "flow (m3/s)"),
opposite = TRUE)) %>%
hc_add_series(data = filter(rainfall, variable == "rain") %>% mutate(value = -value) %>% .$value, type = "column") %>%
hc_add_series(data = filter(rainfall, variable == "discharge") %>% .$value, type = "spline", yAxis = 1) %>%
hc_xAxis(categories = rainfall$date, title = list(text = "date"))
hc
hc <- highchart() %>%
hc_yAxis_multiples(list(title = list(text = "rainfall depth (mm)"), reversed = FALSE),
list(title = list(text = "flow (m3/s)"),
opposite = TRUE)) %>%
hc_add_series(data = filter(rainfall, variable == "rain") %>% mutate(value = -value) %>% .$value, type = "column") %>%
hc_add_series(data = filter(rainfall, variable == "discharge") %>% .$value, type = "spline", yAxis = 1) %>%
hc_xAxis(categories = rainfall$date, title = list(text = "date"))
hc
library(ggplot2)
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
library(ggplot2)
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_col(data = filter(rainfall, variable == "rain"), aes(date, value), fill = "skyblue3") +
theme_bw() +
geom_line(data = filter(rainfall, variable == "discharge"), aes(date, value)) +
labs(title = "A rainfall hyetograph and streamflow hydrograph")
library(ggplot)
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_col(data = filter(rainfall, variable == "rain"), aes(date, value), fill = "skyblue3") +
theme_bw() +
geom_line(data = filter(rainfall, variable == "discharge"), aes(date, value)) +
labs(title = "A rainfall hyetograph and streamflow hydrograph")
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_bar(data = filter(rainfall, variable == "rain"), aes(date, value), fill = "skyblue3") +
theme_bw() +
geom_line(data = filter(rainfall, variable == "discharge"), aes(date, value)) +
labs(title = "A rainfall hyetograph and streamflow hydrograph")
library(ggplot2)
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_bar(data = filter(rainfall, variable == "rain"), aes(date, value), fill = "skyblue3") +
theme_bw() +
geom_line(data = filter(rainfall, variable == "discharge"), aes(date, value)) +
labs(title = "A rainfall hyetograph and streamflow hydrograph")
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_bar(data = filter(rainfall, variable == "rain"), aes(date, value), fill = "skyblue3") +
theme_bw()
library(ggplot2)
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s")))
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_bar(data = filter(rainfall, variable == "rain"), aes(date, value), fill = "skyblue3")
library(ggplot2)
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_bar(data = filter(rainfall, variable == "rain"), aes(date, value))
library(ggplot2)
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_col(data = filter(rainfall, variable == "rain"), aes(date, value), fill = "skyblue3") +
theme_bw() +
geom_line(data = filter(rainfall, variable == "discharge"), aes(date, value)) +
labs(title = "A rainfall hyetograph and streamflow hydrograph")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
help geom_col()
library(ggplot2)
help geom_col()
install.packages("ggplot2")
library(ggplot2)
ggplot() +
facet_grid(variable ~ ., scales = "free", switch = "y", labeller = labeller(variable = c("rain" = "rainfall depth (mm)", "discharge" = "flow m3/s"))) +
geom_col(data = filter(rainfall, variable == "rain"), aes(date, value), fill = "skyblue3") +
theme_bw() +
geom_line(data = filter(rainfall, variable == "discharge"), aes(date, value)) +
labs(title = "A rainfall hyetograph and streamflow hydrograph")
library(ggplot)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
